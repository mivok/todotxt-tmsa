#!/usr/bin/env python3
# Time Management for Systems Administrators helper scripts
#
# Copyright (C) 2013 Mark Harrison
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import datetime
import glob
import os
import re
import sys
from node import Node, pprint_tree

# OPTIONS
# Text attributes for coloring and boldness
# See the termcolor documentation for more options:
# https://pypi.org/project/termcolor/
day_color = 'red'
day_attrs = ['bold']
day_format = "%b %d"
# Show task using the weekday name instead of the day format
day_name_if_soon = True

try: from termcolor import colored
except ImportError:
    enableColoring = False
else:
    enableColoring = True

commands = {
    'bringforward': ["Bring forward any unmanaged tasks to today"],
    'bump': ["Bump a task to the next day", "For example, bump 2"],
    'bumpall': ["Bump all tasks to the next day"],
    'verify': ["Print out to do files that have unmanaged active tasks"],
    'future': ["Print a tree of all the future tasks", "Give a number to limit\
 it by that number of weeks into the future"],
    'tmsa': [
        "Time management for systems administrators helper script.",
        "Provides a set of commands to help with the Cycle, which",
        "makes use of daily to do lists.",
        "This command will create symlinks for the other commands"
    ]
}


def make_symlinks():
    "Makes symlinks for the various tmsa commands"
    os.chdir(os.environ["TODO_ACTIONS_DIR"])
    for command in commands:
        if command == 'tmsa':
            continue
        try:
            os.symlink('tmsa', command)
            print("Created symlink for %s" % command)
        except OSError as e:
            if e.errno == 17:
                print("Symlink for %s already created" % command)
            else:
                raise


def strip_priority(line):
    "Removes the priority, if any, from a todo item"
    return re.sub('^\([A-Z]\) ', '', line)

def undone_lines(fh):
    "Internal function to return lines in a file handle not marked as done."
    content = fh.readlines()
    undone_lines = [l for l in content if re.match('^(?!x \d{4}-\d{2}-\d{2})',l)]
    return undone_lines;


def find_unmanaged():
    "Find files with unmanaged active tasks"
    unmanaged = []
    os.chdir(os.environ["TODO_DIR"])
    now = datetime.datetime.now().replace(hour=0, minute=0, second=0,
                                          microsecond=0)
    for f in glob.glob("????-??-??.txt"):
        d, e = f.split(".")
        size = os.stat(f).st_size
        # Find the date-based files before today that contain any non-done items
        if datetime.datetime.strptime(d, "%Y-%m-%d") < now and size > 0:
            with open(f) as fh:
                if undone_lines(fh):
                   unmanaged.append(f)
    return unmanaged

def decode_recurcmd(cmdstr):
    "Return a dictionary with 'day', 'task', and a list 'weeks'"
    result = {}
    precol,postcol = cmdstr.split(':')
    time_pos = precol.rsplit(maxsplit=1)
    result['day'] = time_pos[-1].strip().lower()
    result['weeks'] = []
    if len(time_pos) > 1:
        result['weeks'] = [week.strip() for week in time_pos[0].split(',')]
    result['task'] = postcol.strip()
    return result

def find_future_files():
    "Find files which occur after today"
    files = []
    today = datetime.datetime.now().replace(hour=0, minute=0, second=0,
                                          microsecond=0)
    os.chdir(os.environ["TODO_DIR"])

    for fn in sorted(glob.iglob("????-??-??.txt")):
        d, e = fn.split(".")
        size = os.stat(fn).st_size
        if datetime.datetime.strptime(d, "%Y-%m-%d") > today and size > 0:
            files.append(fn)
    return files

def get_future_remcur():
    result = {}
    # today = datetime.datetime.now().replace(hour=0, minute=0, second=0,
    #                                       microsecond=0)
    today = datetime.date.today()
    days = [day.lower() for day in calendar.weekheader(10).split()]
    numbers = ["first", "second", "third", "fourth", "five"]
    with open("recur.txt", 'r') as f:
        recur_tasks = [decode_recurcmd(line.strip()) for line in f if not
                line.isspace()]
    found_tr_day = None
    for task_rule in recur_tasks:
        if task_rule['weeks']:
            day_index = days.index(task_rule['day'])
            cal = calendar.Calendar(day_index).monthdatescalendar(today.year,
                    today.month)
            for week in task_rule['weeks']:
                try:
                    wn = numbers.index(week)+1
                except(ValueError):
                    if week == 'last':
                        wn = -1
                    else:
                        raise ValueError("%s is not a week name" % week)
                found_tr_day = cal[wn][0]
                if found_tr_day > today: break
                else: found_tr_day = None
        else:
            wdnum = today.weekday()
            diff = days.index(task_rule['day']) - wdnum
            if diff < 0: diff += 7
            found_tr_day = today+datetime.timedelta(diff)

        if found_tr_day is not None:
            if found_tr_day in result:
                result[found_tr_day].append(task_rule['task'])
            else:
                result[found_tr_day] = [task_rule['task']]
    return result

def gen_tree(tasks):
    "Generate a list of nodes for the given task dictionary in order"
    trans = {} # a copy of tasks transformed for pretty keys
    today = datetime.date.today()
    for date in sorted(tasks):
        pretty_key = date.strftime('%A' if day_name_if_soon and date - today <
                datetime.timedelta(weeks=1) else day_format)
        pretty_key = colored(pretty_key, day_color, attrs=day_attrs) if enableColoring else pretty_key
        trans[pretty_key] = tasks[date]

    # Since Python 3.6 dictionaries remember order insertion
    day_nodes = [Node(k, [Node(t) for t in trans[k]]) for k in trans if trans[k]]
    return day_nodes


def bump(from_file, to_file, line_num=None):
    "Bumps a task, or all if no line is provided"
    auto_archive = "TODOTXT_AUTO_ARCHIVE" in os.environ and \
        os.environ["TODOTXT_AUTO_ARCHIVE"] == "1"
    preserve_line_numbers = "TODOTXT_PRESERVE_LINE_NUMBERS" in \
        os.environ and os.environ["TODOTXT_PRESERVE_LINE_NUMBERS"] == "1"

    os.chdir(os.environ["TODO_DIR"])
    now = datetime.datetime.now()
    today = now.strftime("%Y-%m-%d")
    ifh = open(from_file)  # File to bump from
    ofh = open(to_file, "a")  # File to bump to
    tfh = open("%s.tmp" % from_file, "w")  # Temporary file
    if auto_archive:
        dfh = open("%s-done.txt" % from_file[:-4], "a")  # Done file
    else:
        dfh = tfh
    bumped = []
    for n, line in enumerate(undone_lines(ifh)):
        n += 1  # 1-indexed lines
        if not line_num or line_num == n:
            ## Bump the item
            # Copy line to today's file
            ofh.write(line)
            # Mark as done (and bumped) in the done file
            dfh.write("x %s %s bumped:%s\n" % (today,
                      strip_priority(line).rstrip(),
                      to_file[:-4]))
            if auto_archive and preserve_line_numbers and line_num:
                tfh.write("\n")
            bumped.append(line.rstrip())
        else:
            # Don't bump the item
            tfh.write(line)
    ifh.close()
    if auto_archive:
        dfh.close()
    ofh.close()
    tfh.close()
    # Now move the temp file (with the bumped entries remove) to the original
    # from file
    os.remove(from_file)
    os.rename("%s.tmp" % from_file, from_file)
    # Status message
    print("\n".join(bumped))
    if line_num:
        print("TODO: %s bumped from %s to %s" % (line_num, from_file, to_file))
    else:
        print("TODO: all items bumped from %s to %s" % (from_file, to_file))


def usage(command):
    if command in commands:
        print("    %s" % command)
        print("\n".join("      %s" % i for i in commands[command]))

if __name__ == '__main__':
    action = sys.argv[1]
    if action == 'usage':
        prog = os.path.basename(sys.argv[0])  # Identify command
        usage(prog)
        sys.exit(0)

    if action == 'verify':
        unmanaged = find_unmanaged()
        if unmanaged:
            print('\n'.join(sorted(find_unmanaged())))
        sys.exit(0)

    if action == 'future':
        tasks = {}
        files = find_future_files()
        if len(sys.argv) > 2:
            limit = datetime.timedelta(weeks = int(sys.argv[2]))
        else:
            limit = datetime.timedelta.max

        for day in files:
            day_base = os.path.splitext(day)[0]
            day_obj = datetime.datetime.strptime(day_base, "%Y-%m-%d").date()
            with open(day) as f:
                tasks[day_obj] = [line.strip() for line in f if not
                        line.isspace()]

        if os.path.exists("recur.txt"):
            import calendar
            tfr = get_future_remcur()
            # Merge the two
            for task in tasks:
                if task in tfr:
                    tasks[task] += tfr[task]
                    del tfr[task]
                    break
            tasks |= tfr

        today = datetime.date.today()
        for date in tasks.copy():
            if date - today > limit:
                tasks.pop(date)
        day_nodes = gen_tree(tasks)
        for tree in day_nodes:
            pprint_tree(tree)
            print()

    if action == 'bump' or action == 'bumpall':
        to_bump = None
        now = datetime.datetime.now()
        weekday = now.weekday()
        if weekday == '5':
            # Today is friday, skip to monday
            days = 3
        else:
            days = 1
        if action == 'bump':
            if len(sys.argv) < 3:
                usage('bump')
                sys.exit(1)
            try:
                to_bump = int(sys.argv[2])
                if len(sys.argv) == 4:
                    days = int(sys.argv[3])
            except ValueError:
                usage('bump')
                sys.exit(1)
        next_day = now + datetime.timedelta(days=days)
        today = now.strftime("%Y-%m-%d.txt")
        next_file = next_day.strftime("%Y-%m-%d.txt")
        bump(today, next_file, to_bump)
        sys.exit(0)

    if action == 'bringforward':
        now = datetime.datetime.now()
        unmanaged = find_unmanaged()
        today = now.strftime("%Y-%m-%d.txt")
        for f in unmanaged:
            bump(f, today)
        sys.exit(0)

    if action == 'tmsa':
        make_symlinks()
        sys.exit(0)
